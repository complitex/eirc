<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.complitex.domain.mapper.DomainMapper">
<!--    <cache/>-->

    <resultMap id="domainResultMap" type="ru.complitex.domain.entity.Domain">
        <id column="id" property="id"/>
        <result column="object_id" property="objectId"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="status" property="status"/>
        <result column="permission_id" property="permissionId"/>
        <result column="external_id" property="externalId"/>
        <result column="entity_name" property="entityName"/>
        <result column="user_id" property="userId"/>
        <collection column="entityName=entity_name, objectId=id" property="attributes"
                    select="ru.complitex.domain.mapper.AttributeMapper.selectAttributes"/>
    </resultMap>

    <resultMap id="domainResultMapJoin" type="ru.complitex.domain.entity.Domain">
        <id column="id" property="id"/>
        <result column="object_id" property="objectId"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="status" property="status"/>
        <result column="permission_id" property="permissionId"/>
        <result column="external_id" property="externalId"/>
        <result column="entity_name" property="entityName"/>
        <result column="user_id" property="userId"/>
        <collection property="attributes" ofType="ru.complitex.domain.entity.Attribute" notNullColumn="a_id">
            <id column="a_id" property="id"/>
            <result column="a_domain_id" property="domainId"/>
            <result column="a_entity_attribute_id" property="entityAttributeId"/>
            <result column="a_text" property="text"/>
            <result column="a_number" property="number"/>
            <result column="a_date" property="date"/>
            <result column="a_start_date" property="startDate"/>
            <result column="a_end_date" property="endDate"/>
            <result column="a_status" property="status"/>
            <result column="a_user_id" property="userId"/>
            <result column="a_entity_name" property="entityName"/>
            <collection property="values" ofType="ru.complitex.domain.entity.Value" notNullColumn="v_id">
                <id column="v_id" property="id"/>
                <result column="v_attribute_id" property="attributeId"/>
                <result column="v_locale_id" property="localeId"/>
                <result column="v_text" property="text"/>
                <result column="v_number" property="number"/>
            </collection>
        </collection>
    </resultMap>

    <!--suppress SqlResolve -->
    <insert id="insertId" parameterType="ru.complitex.domain.entity.Id" useGeneratedKeys="true" keyProperty="objectId">
        insert into "${entityName}_id" (uuid) values ('${uuid}')
    </insert>

    <!--suppress SqlResolve -->
    <insert id="insertDomain" parameterType="ru.complitex.domain.entity.Domain" useGeneratedKeys="true" keyProperty="id">
        insert into "${entityName}" (object_id, start_date, end_date, "status", permission_id, user_id)
            values (#{objectId}, #{startDate}, #{endDate}, #{status}, #{permissionId}, #{userId})
    </insert>

    <!--suppress SqlResolve -->
    <update id="updateDomainObjectId" parameterType="ru.complitex.domain.entity.Domain">
        update "${entityName}" set object_id = #{objectId} where id = #{id}
    </update>

    <sql id="selectDomainSelect">
        a.id a_id, a.domain_id a_domain_id, a.entity_attribute_id a_entity_attribute_id, a.text a_text,
        a.number a_number, a.date a_date, a.start_date a_start_date, a.end_date a_end_date, a.status a_status,
        a.user_id a_user_id, '${entityName}' a_entity_name, v.id v_id, v.attribute_id v_attribute_id,
        v.locale_id v_locale_id, v.text v_text, v.number v_number
    </sql>

    <!--suppress SqlResolve -->
    <sql id="selectDomainSelectFrom">
        select d.*, '${entityName}' entity_name,
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainSelect"/>

        from "${entityName}" d
        left join "${entityName}_attribute" a on a.domain_id = d.id and a.status = 1
        left join "${entityName}_value" v on v.attribute_id = a.id
    </sql>

    <!--suppress SqlResolve -->
    <sql id="selectDomainSql">
        <include refid="ru.complitex.domain.mapper.DomainMapper.selectDomainSelectFrom"/>

        <if test="attributes != null and !attributes.isEmpty">
            <foreach collection="attributes" index="i" item="a">
                <if test="a.text != null or a.number != null">
                    left join "${entityName}_attribute" a${i}
                    on (a${i}.domain_id = d.id and a${i}.entity_attribute_id = #{a.entityAttributeId})
                </if>
            </foreach>
        </if>

        <where>
            <if test="objectId != null">and d.object_id = #{objectId} and d."status" = 1</if>

            <if test="attributes != null and !attributes.isEmpty">
                <foreach collection="attributes" index="i" item="a">
                    <if test="a.text != null">and (a${i}.text = #{a.text} and a${i}.status = 1)</if>
                    <if test="a.number != null">and (a${i}.number = #{a.number} and a${i}.status = 1)</if>
                </foreach>
            </if>
        </where>
    </sql>

    <!--suppress SqlResolve -->
    <select id="selectDomain" parameterType="ru.complitex.domain.entity.Domain" resultMap="domainResultMapJoin">
        <include refid="selectDomainSql"/>
    </select>

    <!--suppress SqlResolve -->
    <select id="hasDomain" parameterType="ru.complitex.domain.entity.Domain" resultType="boolean">
        select count(d1.object_id) > 0 from (<include refid="selectDomainSql"/>) d1
    </select>

    <!--suppress SqlResolve -->
    <select id="selectDomainObjectId" parameterType="ru.complitex.domain.entity.Domain" resultType="long">
        select d.object_id from "${entityName}" d
            left join "${entityName}_attribute" a on a.domain_id = d.id
            left join "${entityName}_value" v on v.attribute_id = a.id
        <where>
            <foreach collection="attributes" item="i" separator="and">
              <foreach collection="i.values" item="j" separator="and">
                  <if test="j.text != null">
                      (a.entity_attribute_id = #{i.entityAttributeId} and v.locale_id = #{j.localeId} and v.text = #{j.text})
                  </if>
              </foreach>
            </foreach>
        </where>
        limit 1
    </select>

    <sql id="selectDomainsFrom">

    </sql>

    <sql id="selectDomainsJoinFilter">
        <foreach collection="object.attributes" index="i" item="a">
            <if test="a.text != null or a.number != null or a.date != null or (a.values != null and !a.values.empty)">
                left join "${object.entityName}_attribute" a${i} on a${i}.domain_id = d.id
                    and a${i}.entity_attribute_id = #{a.entityAttributeId} and a${i}.status = 1
                left join "${object.entityName}_value" v${i} on v${i}.attribute_id = a${i}.id
                    and v${i}.locale_id = #{localeId}

               <if test="a.entityAttribute != null and a.entityAttribute.referenceEntityAttribute != null">
                   left join "${a.entityAttribute.referenceEntityAttribute.entityName}" d${i}_ref
                       on d${i}_ref.object_id = a${i}.number
                   left join "${a.entityAttribute.referenceEntityAttribute.entityName}_attribute" a${i}_ref
                       on a${i}_ref.domain_id = d${i}_ref.id
                           and a${i}_ref.entity_attribute_id = ${a.entityAttribute.referenceEntityAttribute.entityAttributeId}
                           and a${i}.status = 1
                   left join "${a.entityAttribute.referenceEntityAttribute.entityName}_value" v${i}_ref
                       on v${i}_ref.attribute_id = a${i}_ref.id and v${i}_ref.locale_id = #{localeId}
                </if>
            </if>
        </foreach>
       <!-- <if test="object.map.attributes != null">
            <foreach collection="object.map.attributes" index="i" item="b">
                <if test="b.text != null or b.number != null or b.date != null">
                    left join "${object.entityName}_attribute" b${i} on b${i}.domain_id = d.id
                        and b${i}.entity_attribute_id = #{b.entityAttributeId} and b${i}.status = 1
                    left join "${object.entityName}_value" bv${i} on bv${i}.attribute_id = b${i}.id
                </if>
            </foreach>
        </if>
        <if test="object.map.notAttributes != null">
            <foreach collection="object.map.notAttributes" index="i" item="c">
                <if test="c.text != null or c.number != null or c.date != null">
                    left join "${object.entityName}_attribute" c${i} on (c${i}.domain_id = d.id
                        and c${i}.entity_attribute_id = #{c.entityAttributeId} and c${i}.status = 1)
                </if>
            </foreach>
        </if>-->
    </sql>

    <sql id="selectDomainsWhere">
        <where>
            <if test="object.objectId != null">
                d.object_id = #{object.objectId}
            </if>

            <foreach collection="object.attributes" index="i" item="a">
                <if test="a.text != null">
                    <choose>
                        <when test="a.entityAttribute != null and a.entityAttribute.referenceEntityAttribute != null">
                            <if test="a.entityAttribute.referenceEntityAttribute.valueTypeId == 4">
                                <if test="filter == 'search'">
                                    ${operator} (a${i}_ref.text ilike concat('%', #{a.text}, '%')
                                </if>
                            </if>

                            <if test="a.entityAttribute.referenceEntityAttribute.valueTypeId == 8">
                                <if test="filter == 'search'">
                                    ${operator} v${i}_ref.text ilike concat('%', #{a.text}, '%')
                                </if>
                            </if>
                        </when>
                        <otherwise>
                            <if test="filter == 'equal'">
                                ${operator} (a${i}.text = #{a.text} or v${i}.text = #{a.text})
                            </if>
                            <if test="filter == 'search'">
                                ${operator} (a${i}.text ilike concat('%', #{a.text}, '%') or v${i}.text ilike concat('%', #{a.text}, '%'))
                            </if>
                        </otherwise>
                    </choose>
                </if>

                <if test="a.number != null">
                    <choose>
                        <when test="a.entityAttribute != null and a.entityAttribute.valueTypeId == 6">
                            ${operator} a${i}.number = #{a.number}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="a.number == -1">
                                    and a${i}.number is null
                                </when>
                                <when test="a.number == -2">
                                    and a${i}.number is not null
                                </when>
                                <otherwise>
                                    and (
                                        a${i}.number = #{a.number} or v${i}.number = #{a.number}
                                    )
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </if>

                <if test="a.date != null">
                    <choose>
                        <when test="a.filter == 'same_day'">
                            and (date(a${i}.date) = date(#{a.date}))
                        </when>

                        <when test="a.filter == 'same_month'">
                            and (year(a${i}.date) = year(#{a.date}) and month(a${i}.date) = month(#{a.date}))
                        </when>

                        <when test="a.filter == 'before_or_equal_date'">
                            and (#{a.date} >= a${i}.date)
                        </when>

                        <otherwise>
                            and (a${i}.date = #{a.date})
                        </otherwise>
                    </choose>
                </if>

                <if test="a.values != null and !a.values.empty">
                    <foreach collection="a.values" item="v">
                        <if test="a.filter = 'equal' and v.text != null and v.localeId != null">
                            and v${i}.text = #{v.text} and v${i}.locale_id = #{v.localeId}
                        </if>
                    </foreach>
                </if>
            </foreach>

            <!--<if test="object.map.attributes != null">
                <foreach collection="object.map.attributes" index="i" item="b">
                    <if test="b.number != null">
                        and (b${i}.number = #{b.number} or bv${i}.number = #{b.number})
                    </if>
                </foreach>
            </if>

            <if test="object.map.notAttributes != null">
                <foreach collection="object.map.notAttributes" index="i" item="c">
                    <if test="c.number != null">
                        <![CDATA[
                            and (c${i}.number <> #{c.number} or c${i}.number is null)
                        ]]>
                    </if>
                </foreach>
            </if>-->

            <if test="object.map.excludeObjectIds != null">
                and d.object_id not in
                <foreach collection="object.map.excludeObjectIds" item="o" open="(" separator="," close=")">
                    #{o}
                </foreach>
            </if>

            <choose>
                <when test="status == 'active_and_archive'">
                    and d.status in (1, 2)
                </when>
                <otherwise>
                    <choose>
                        <when test="object.status != 0">
                            and d.status = #{object.status}
                        </when>
                        <otherwise>
                            and d.status = 1
                        </otherwise>
                    </choose>
                </otherwise>
            </choose>
        </where>
    </sql>

    <sql id="selectDomainsSelectSort">
        <if test="sort != null">
            <choose>
                <when test="sort.key == 'text'">, sort_a.text</when>
                <when test="sort.key == 'number'">, sort_a.number</when>
                <when test="sort.key == 'date'">, sort_a.date</when>
                <when test="sort.key == 'values'">, sort_v.text</when>
                <when test="sort.key == 'entity'">, sort_rv.text</when>
            </choose>
        </if>
    </sql>

    <sql id="selectDomainsJoinSort">
        <if test="sort != null">
            <if test="sort.key == 'entity_attribute'">
                left join "${object.entityName}_attribute" sort_a on sort_a.domain_id = d.id
                    and sort_a.entity_attribute_id = #{sort.value.entityAttributeId} and sort_a.status = 1

                <if test="sort.value.valueTypeId == 6">
                    left join "${sort.value.referenceEntityAttribute.entityName}" sort_r
                        on sort_r.object_id = sort_a.number and sort_r.status = 1

                    left join "${sort.value.referenceEntityAttribute.entityName}_attribute" sort_ra
                      on sort_ra.domain_id = sort_r.id
                        and sort_ra.entity_attribute_id = #{sort.value.referenceEntityAttribute.entityAttributeId}
                        and sort_ra.status = 1

                    <if test="sort.value.referenceEntityAttribute.valueTypeId == 8">
                        left join "${sort.value.referenceEntityAttribute.entityName}_value" sort_rv
                            on sort_rv.attribute_id = sort_ra.id and sort_rv.locale_id = #{localeId}
                    </if>
                </if>

                <if test="sort.value.valueTypeId == 8">
                    left join "${object.entityName}_value" sort_v on sort_v.attribute_id = sort_a.id
                        and sort_v.locale_id = #{localeId}
                </if>

                <!--

                <if test="sort.key == 'entity_value' and sort.values != null and sort.values.referenceEntityAttribute != null">
                    left join "${sort.values.referenceEntityAttribute.entityName}_attribute" sort_ra
                      on sort_ra.object_id = sort_v.number
                        and sort_ra.entity_attribute_id = #{sort.values.referenceEntityAttribute.entityAttributeId}
                        and sort_ra.status = 1
                    left join "${sort.values.referenceEntityAttribute.entityName}_value" sort_rv
                      on sort_rv.attribute_id = sort_ra.id
                </if>
                -->
            </if>
        </if>
    </sql>

    <sql id="selectDomainsSort">
        <if test="sort != null">
            <choose>
                <when test="sort.key == 'object_id'">
                    order by d.object_id ${asc}
                </when>
                <when test="sort.key == 'entity_attribute'">
                    <choose>
                        <when test="sort.value.valueTypeId == 6">
                            <if test="sort.value.referenceEntityAttribute.valueTypeId == 8">
                                order by sort_rv.text ${asc}
                            </if>
                        </when>
                        <when test="sort.value.valueTypeId == 8">
                            order by sort_v.text ${asc}
                        </when>
                    </choose>
                </when>


                <!--<when test="sort.key == 'id'">order by d.id ${asc}</when>
                <when test="sort.key == 'text'">order by group_concat(sort_a.text order by sort_a.text ${asc}) ${asc}</when>
                <when test="sort.key == 'number'">order by max(sort_a.number) + 0 ${asc}</when>
                <when test="sort.key == 'date'">order by group_concat(sort_a.date order by sort_a.date ${asc}) ${asc}</when>
                <when test="sort.key == 'values'">order by group_concat(sort_v.text order by sort_v.text  ${asc}) ${asc}</when>-->
                <!--
                <when test="sort.key in {'entity', 'entity_value'} and sort.values != null and sort.values.referenceEntityAttribute != null">
                    order by group_concat(sort_rv.text order by sort_rv.text ${asc}) ${asc}
                </when>
                -->
            </choose>
        </if>
    </sql>

    <!--suppress SqlResolve -->
    <sql id="selectDomainsSelect">
        select '${object.entityName}' entity_name, d.*,
        a.id a_id, a.domain_id a_domain_id, a.entity_attribute_id a_entity_attribute_id, a.text a_text,
        a.number a_number, a.date a_date, a.start_date a_start_date, a.end_date a_end_date, a.status a_status,
        a.user_id a_user_id, '${object.entityName}' a_entity_name,
        v.id v_id, v.attribute_id v_attribute_id, v.locale_id v_locale_id, v.text v_text, v.number v_number
    </sql>

    <!--suppress SqlResolve -->
    <select id="selectDomains" parameterType="ru.complitex.common.entity.Filter" resultMap="domainResultMapJoin">
        <include refid="selectDomainsSelect"/>
        from (select d.id from "${object.entityName}" d
            <include refid="selectDomainsJoinFilter"/>
            <include refid="selectDomainsJoinSort"/>
            <include refid="selectDomainsWhere"/>
            <include refid="selectDomainsSort"/>
            ${limit}
        ) o
        left join "${object.entityName}" d on d.id = o.id
        left join "${object.entityName}_attribute" a on a.domain_id = d.id and a.status = 1
            <if test="!entityAttributeIds.empty">
                and a.entity_attribute_id in
                    <foreach collection="entityAttributeIds" open="(" close=")" separator="," item="i">
                        ${i}
                    </foreach>
            </if>
        left join "${object.entityName}_value" v on v.attribute_id = a.id
        <include refid="selectDomainsJoinSort"/>
        <include refid="selectDomainsSort"/>
    </select>

    <!--suppress SqlResolve -->
    <select id="selectDomainsCount" parameterType="ru.complitex.common.entity.Filter" resultType="long">
        select count(distinct d.id) from "${object.entityName}" d
        <include refid="selectDomainsJoinFilter"/>
        <include refid="selectDomainsWhere"/>
    </select>

    <!--suppress SqlResolve -->
    <update id="updateDomain" parameterType="ru.complitex.domain.entity.Domain">
        update "${entityName}" set  "status" = #{status}, end_date = #{endDate} where id = #{id}
    </update>
</mapper>
